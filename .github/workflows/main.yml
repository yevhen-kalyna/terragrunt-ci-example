# TODO: Detect changes in _envcommon folder and run commands in terragrunt folders with changed modules
# TODO: Detect changes in terraform modules and run commands in terragrunt folders with changed modules
# TODO: Fix detection of changed folders if parent folder is changed https://github.com/yevhen-kalyna/terragrunt-ci-example/actions/runs/7790973748/job/21246013458
name: Terragrunt CI

on:
  push:
    branches:
      - main
    paths:
      - 'terragrunt/**'
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terragrunt/**'
      - 'terraform/**'

env:
  tf_version: '1.4.4'
  tg_version: '0.48.1'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      terragrunt_all: ${{ steps.changes.outputs.terragrunt_all }}
      changed_folders: ${{ steps.get-changed-folders.outputs.CHANGED_FOLDERS }}
      tg_staging: ${{ steps.changes.outputs.tg_staging }}
      tg_production: ${{ steps.changes.outputs.tg_production }}
      tg_not_stg_prod: ${{ steps.changes.outputs.tg_not_stg_prod }}
      tg_staging_folders: ${{ steps.get-changed-staging-folders.outputs.STAGING_FOLDERS }}
      tg_production_folders: ${{ steps.get-changed-staging-folders.outputs.PRODUCTION_FOLDERS }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Filter paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          list-files: shell
          filters: |
            terragrunt_all:
              - 'terragrunt/**/terragrunt.hcl'
            terraform_all:
              - 'terraform/**/*.tf'
            envcommon_all:
              - 'terragrunt/_envcommon/**/*'
            hcl_all:
              - '**/*.hcl'
            tg_staging:
              - 'terragrunt/account2/region1/env-staging/**/*'
              - 'terragrunt/account2/region1/region.hcl'
              - 'terragrunt/account2/account.hcl'
            tg_production:
              - 'terragrunt/account1/region1/env-production/**/*'
              - 'terragrunt/account1/region1/region.hcl'
              - 'terragrunt/account1/account.hcl'
      - name: Get changed folders
        id: get-changed-folders
        run: |
          # Will set CHANGED_FOLDERS as JSON array, and remove stg/prod folders from it
          .github/parse_paths.py ${{ steps.changes.outputs.terraform_all_files }} ${{ steps.changes.outputs.hcl_all_files }} --exclude terragrunt/account2/region1/env-staging terragrunt/account1/region1/env-production
        shell: bash

      - name: Get changed protected folders
        id: get-changed-staging-folders
        env:
          STG_AND_PROD_JSON: ${{ steps.get-changed-folders.outputs.EXCLUDED_FOLDERS }}
        run: |
          STG_AND_PROD=$(echo $STG_AND_PROD_JSON | jq -r '.[]')
          staging_folders=()
          production_folders=()

          # Convert JSON string to bash array
          for folder in $STG_AND_PROD; do
            if echo "$folder" | grep -q "env-staging"; then
              staging_folders+=("$folder")
            elif echo "$folder" | grep -q "env-production"; then
              production_folders+=("$folder")
            elif echo "$folder" | grep -q "account2"; then
              staging_folders+=("$folder")
            elif echo "$folder" | grep -q "account1"; then
              production_folders+=("$folder")
            fi
          done

          # Convert bash arrays to JSON arrays
          STAGING_JSON=$(printf '%s\n' "${staging_folders[@]}" | jq -R . | jq -s . | jq -c .)
          PRODUCTION_JSON=$(printf '%s\n' "${production_folders[@]}" | jq -R . | jq -s . | jq -c .)

          # Ensure the output is correctly formatted for GitHub Actions
          if [ -z "${staging_folders[@]}" ]; then
            echo "STAGING_FOLDERS='[]'" >> $GITHUB_OUTPUT
          else
            echo "STAGING_FOLDERS=${STAGING_JSON}" >> $GITHUB_OUTPUT
          fi

          if [ -z "${production_folders[@]}" ]; then
            echo "PRODUCTION_FOLDERS='[]'" >> $GITHUB_OUTPUT
          else
            echo "PRODUCTION_FOLDERS=${PRODUCTION_JSON}" >> $GITHUB_OUTPUT
          fi
          echo STAGING_FOLDERS=$STAGING_JSON
          echo PRODUCTION_FOLDERS=$PRODUCTION_JSON
        shell: bash
          

  plan-any:
    if: ${{ needs.detect-changes.outputs.terragrunt_all == 'true' && needs.detect-changes.outputs.changed_folders != '[]'}}
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJSON(needs.detect-changes.outputs.changed_folders) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Terragrunt plan
      #   uses: gruntwork-io/terragrunt-action@v2
      #   with:
      #     tf_version: ${{ env.tf_version }}
      #     tg_version: ${{ env.tg_version }}
      #     tg_command: plan
      #     tg_dir: ${{ matrix.folder }}

      - name: Echo
        run: |
          echo "do something in: ${{ matrix.folder }} folder"


  plan-staging:
    if: ${{ needs.detect-changes.outputs.tg_staging == 'true' || needs.detect-changes.outputs.tg_production == 'false'}}
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJSON(needs.detect-changes.outputs.tg_staging_folders) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate
        run: |
          # if prod changed, but stg not, fail the build
          if [[ ${{ needs.detect-changes.outputs.tg_staging_folders }} == '[]' ]]; then
            echo "Production changed, but staging not. Failing the build"
            exit 1
          fi

      - name: Echo staging
        run: |
          echo "do something in: ${{ matrix.folder }} folder"

  apply-staging:
    needs: 
      - plan-staging
      - detect-changes
    runs-on: ubuntu-latest
    environment:
      name: staging
    strategy:
      matrix:
        folder: ${{ fromJSON(needs.detect-changes.outputs.tg_staging_folders) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Echo apply staging
        run: |
          echo "do something in: ${{ matrix.folder }} folder"
  
  plan-production:
    if: ${{ needs.detect-changes.outputs.tg_production == 'true' }}  
    needs:
      - detect-changes
      - apply-staging
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJSON(needs.detect-changes.outputs.tg_production_folders) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Echo production
        run: |
          echo "do something in: ${{ matrix.folder }} folder"

  apply-production:
    needs: 
      - plan-production
      - detect-changes
    runs-on: ubuntu-latest
    environment:
      name: production
    strategy:
      matrix:
        folder: ${{ fromJSON(needs.detect-changes.outputs.tg_production_folders) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Echo apply production
        run: |
          echo "do something in: ${{ matrix.folder }} folder"